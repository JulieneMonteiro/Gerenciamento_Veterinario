package a4;

import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author Juliana
 */
public class TelaAnimal extends javax.swing.JFrame {

    /**
     * Creates new form TelaAnimal
     *
     * @param inicio
     * @param donos
     */
    public TelaAnimal(TelaInicial inicio, ArrayList<Dono> donos) {
        initComponents();
        this.inicio = inicio;
        this.donos = donos;
        isEdicao = false;

        //listener da busca
        jFormattedTextFieldCPF.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER && jFormattedTextFieldCPF.getText().trim().isEmpty() == false) {
                    buscar_Animal();
                    mostrar_Animal();
                }
            }

            @Override
            public void keyReleased(KeyEvent e) {

            }

        });

        //formatação da data de nascimento
        try {
            MaskFormatter formatoDob = new MaskFormatter("##/##/####");
            formatoDob.setPlaceholderCharacter('_');

            //linkando esse formato com o text field
            jFormattedTextFieldDob.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(formatoDob));
        } catch (java.text.ParseException e) {
            e.getErrorOffset();
        }
        
        //validação da data
        jFormattedTextFieldDob.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                
            }

            @Override
            public void focusLost(FocusEvent e) {
                validar_dob();
            }

        });
        
        //formatação do cpf
        try{
            MaskFormatter formatoCPF = new MaskFormatter("###.###.###-##");
            formatoCPF.setPlaceholderCharacter('_');
            
            jFormattedTextFieldCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(formatoCPF));
            
        } catch (java.text.ParseException e) {
            e.getErrorOffset();
        }
        
        //listener formatação do nome
        Nometxf.addKeyListener(new KeyAdapter(){
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (Character.isDigit(c)) {
                    e.consume(); // Ignora os numeros
                }
            }
        });
        
        

    }

    public void atualizarDados(ArrayList<Dono> novosDonos, ArrayList<Animal> novosAnimais) {
        this.donos = novosDonos;
        this.animais = novosAnimais;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Animaljtbn = new javax.swing.JLabel();
        CPFjtbn = new javax.swing.JLabel();
        Nomejtbn = new javax.swing.JLabel();
        Racajtbn = new javax.swing.JLabel();
        Dobjtbn = new javax.swing.JLabel();
        Nometxf = new javax.swing.JTextField();
        Racatxf = new javax.swing.JTextField();
        Salvarbtn = new javax.swing.JButton();
        Excluirbtn = new javax.swing.JButton();
        Voltarbtn = new javax.swing.JButton();
        ComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Limparbtn = new javax.swing.JButton();
        jFormattedTextFieldDob = new javax.swing.JFormattedTextField();
        jFormattedTextFieldCPF = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Animaljtbn.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        Animaljtbn.setText("Cadastro Animal");
        Animaljtbn.setMinimumSize(new java.awt.Dimension(40, 20));

        CPFjtbn.setText("CPF do Responsável:");

        Nomejtbn.setText("Nome:");

        Racajtbn.setText("Raça:");

        Dobjtbn.setText("Data de Nascimento:");

        Salvarbtn.setText("Salvar");
        Salvarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarbtnActionPerformed(evt);
            }
        });

        Excluirbtn.setText("Excluir");
        Excluirbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirbtnActionPerformed(evt);
            }
        });

        Voltarbtn.setText("Voltar");
        Voltarbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoltarbtnActionPerformed(evt);
            }
        });

        ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Lista de animais do Dono:");

        Limparbtn.setText("Limpar");
        Limparbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addComponent(Animaljtbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Racajtbn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Racatxf, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Dobjtbn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jFormattedTextFieldDob, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Nomejtbn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Nometxf, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(CPFjtbn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jFormattedTextFieldCPF)
                            .addComponent(ComboBox, 0, 138, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(67, Short.MAX_VALUE)
                        .addComponent(Salvarbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Excluirbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Limparbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Voltarbtn)
                        .addGap(36, 36, 36)))
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(Animaljtbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPFjtbn)
                    .addComponent(jFormattedTextFieldCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nomejtbn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Nometxf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Racajtbn, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Racatxf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Dobjtbn)
                    .addComponent(jFormattedTextFieldDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Salvarbtn)
                    .addComponent(Excluirbtn)
                    .addComponent(Voltarbtn)
                    .addComponent(Limparbtn))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalvarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarbtnActionPerformed
        if (camposPreenchidos() == true) {
            salvar_Animal();
        } else {
            JOptionPane.showMessageDialog(null,
                      "Para continuar, por favor preencha todos os campos.",
                      "Erro...", JOptionPane.ERROR_MESSAGE);
        }

        limpar_Animal();
    }//GEN-LAST:event_SalvarbtnActionPerformed

    private void ExcluirbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirbtnActionPerformed
        excluir_Animal();
        limpar_Animal();
    }//GEN-LAST:event_ExcluirbtnActionPerformed

    private void VoltarbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoltarbtnActionPerformed
        // TODO add your handling code here:
        irInicio();
    }//GEN-LAST:event_VoltarbtnActionPerformed

    private void ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxActionPerformed
        // TODO add your handling code here:
        mostrar_Animal();
    }//GEN-LAST:event_ComboBoxActionPerformed

    private void LimparbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparbtnActionPerformed
        // TODO add your handling code here:
        limpar_Animal();
    }//GEN-LAST:event_LimparbtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    public ArrayList<Animal> animais;
    public ArrayList<Dono> donos;
    public Iterator it;
    private boolean isEdicao;
    private TelaInicial inicio;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Animaljtbn;
    private javax.swing.JLabel CPFjtbn;
    private javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JLabel Dobjtbn;
    private javax.swing.JButton Excluirbtn;
    private javax.swing.JButton Limparbtn;
    private javax.swing.JLabel Nomejtbn;
    private javax.swing.JTextField Nometxf;
    private javax.swing.JLabel Racajtbn;
    private javax.swing.JTextField Racatxf;
    private javax.swing.JButton Salvarbtn;
    private javax.swing.JButton Voltarbtn;
    private javax.swing.JFormattedTextField jFormattedTextFieldCPF;
    private javax.swing.JFormattedTextField jFormattedTextFieldDob;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private void limpar_Animal() {
        Nometxf.setText("");
        Racatxf.setText("");
        jFormattedTextFieldDob.setText("");
        jFormattedTextFieldCPF.setText("");
        ComboBox.removeAllItems();
    }

    private void salvar_Animal() {

        String cpfDigitado = jFormattedTextFieldCPF.getText();
        String nomeAnimalDigitado = Nometxf.getText();
        boolean cpfCadastrado = false;

        if (donos == null) {
            JOptionPane.showMessageDialog(null,
                      "Nenhum CPF não cadastrado.\nPara continuar, cadastre algum Dono.",
                      "Erro...", JOptionPane.ERROR_MESSAGE);
            limpar_Animal();
            return;
        }

        //verificando se cpf digitado já foi cadastrado
        for (Dono dono : donos) {
            if (dono.getCpf().equals(cpfDigitado)) {
                cpfCadastrado = true;
                break;
            }
        }

        if (animais == null) {
            animais = new ArrayList<>();
        }

        if (cpfCadastrado == true) {

            //atualiza o ponteiro pro incio da lista
            it = animais.iterator();

            while (it.hasNext()) {
                Animal animalExistente = (Animal) it.next();

                //vê se já foi cadastrado, se sim = edição
                if (animalExistente.getCpfD().equals(cpfDigitado) && animalExistente.getNome().equals(nomeAnimalDigitado)) {

                    animalExistente.setNome(Nometxf.getText());
                    animalExistente.setRaca(Racatxf.getText());
                    animalExistente.setDataNasc(jFormattedTextFieldDob.getText());
                    animalExistente.setCpfD(jFormattedTextFieldCPF.getText());

                    isEdicao = true;
                    break;
                }
            }

            //novo animal
            if (isEdicao == false) {
                Animal animal = new Animal();

                animal.setCpfD(cpfDigitado);
                animal.setNome(nomeAnimalDigitado);
                animal.setRaca(Racatxf.getText());
                animal.setDataNasc(jFormattedTextFieldDob.getText());

                animais.add(animal);
            }

            it = animais.iterator();
            JOptionPane.showMessageDialog(null, "Animal salvo com sucesso", "Cadastro", JOptionPane.INFORMATION_MESSAGE);

            //se acabou de editar, termina periodo de edição
            cpfCadastrado = false;

        } else {
            JOptionPane.showMessageDialog(null,
                      "CPF não cadastrado.\nPara continuar, cadastre o Dono.",
                      "Erro...", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void excluir_Animal() {

        if (ComboBox.getSelectedItem() == null || ComboBox.getSelectedItem().toString().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Dono não tem nenhum animal cadastrado", "Busca", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (JOptionPane.showConfirmDialog(null, "Confirma a deleção do Animal " + ComboBox.getSelectedItem().toString(), "Apagar Animal", JOptionPane.YES_NO_OPTION) == 0) {
            animais.remove(ComboBox.getSelectedIndex());
            JOptionPane.showMessageDialog(null, "Animal excluído com sucesso", "Cadastro", JOptionPane.INFORMATION_MESSAGE);

        } else {
            JOptionPane.showMessageDialog(null, "Animal não excluído", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void irInicio() {
        inicio.setAnimais(animais);
        inicio.setVisible(true);
        this.setVisible(false);
        limpar_Animal();
    }

    private void buscar_Animal() {

        ComboBox.removeAllItems();

        if (animais == null) {
            animais = new ArrayList<>();
        }

        for (Animal animal : animais) {
            if (animal.getCpfD().equals(jFormattedTextFieldCPF.getText())) {
                ComboBox.addItem(animal.getNome());
            }
        }

    }

    private void mostrar_Animal() {

        if (ComboBox.getSelectedItem() == null || ComboBox.getSelectedItem().toString().trim().isEmpty()) {
            return;
        }

        String animalSelecionado = ComboBox.getSelectedItem().toString();
        boolean encontrado = false;

        for (Animal animal : animais) {
            if (animalSelecionado.equals(animal.getNome())) {
                Nometxf.setText(animal.getNome());
                Racatxf.setText(animal.getRaca());
                jFormattedTextFieldDob.setText(animal.getDataNasc());
                encontrado = true;
                break;
            }
        }

        if (encontrado == false) {
            JOptionPane.showMessageDialog(null, "Animal não encontrado na lista", "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    private boolean camposPreenchidos() {

        if (Nometxf.getText().equals("") || Racatxf.getText().equals("") || jFormattedTextFieldDob.getText().equals("")) {
            return false;
        } else {
            return true;
        }

    }

    private void validar_dob() {
        String textoDob = jFormattedTextFieldDob.getText();
        boolean isValida;
        
        try {
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            formato.setLenient(false);
            
            Date dataInserida = formato.parse(textoDob);
            Date dataAtual = new Date();
            
            if (dataAtual.after(dataInserida)){
                isValida = true;
            } else {
                isValida = false;
            }
        } catch (ParseException e) {
            isValida = false;
        }
        
        if (isValida == false) {
            JOptionPane.showMessageDialog(null,
                      "Data inválida!\n\nPor favor, insira uma data válida",
                      "Erro", JOptionPane.ERROR_MESSAGE);

            jFormattedTextFieldDob.requestFocus();
            jFormattedTextFieldDob.setText("");
        }
    }

    private static class KeyListener extends KeyAdapter {

        public KeyListener() {
        }
    }

}
